var scaleXandY = 2;

//Change the scale accordingly - This is the value of 10 grid small boxes
var scaleValueX = scaleXandY;
var scaleValueY = scaleXandY;

//Change the canvas length accordingly. Canvas size = canvaslength^2
var canvasLength = 2050;


var scaleGridValueX = scaleValueX/10;
var scaleGridValueY = scaleValueY/10;

var scaleGridX = 5;
var scaleGridY = 5;

//Center of graph
var originX = canvasLength/2;
var originY = canvasLength/2;

//Amount of pixels 10 for 10 grid small boxes
var scaleX = 50;
var scaleY = 50;

String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.split(search).join(replacement);
};
//Solution to be pasted in solution string - Must be same format as solution
var solutionString = "4: (1.0,0.0), (1.5877852522924731,0.0), (1.5877852522924731,0.5877852522924731), (1.0,0.5877852522924731); (1.6,0.0), (2.187785252292473,0.0), (2.187785252292473,0.587785252292473), (1.6,0.587785252292473); (2.2,0.0), (2.787785252292473,0.0), (2.787785252292473,0.5877852522924729), (2.2,0.5877852522924729); (2.8000000000000003,0.0), (3.387785252292473,0.0), (3.387785252292473,0.5877852522924731), (2.8000000000000003,0.5877852522924731); (3.4000000000000004,0.0), (3.9877852522924737,0.0), (3.9877852522924737,0.5877852522924731), (3.4000000000000004,0.5877852522924731); (4.0,0.0), (4.587785252292473,0.0), (4.587785252292473,0.587785252292473), (4.0,0.587785252292473); (4.6,0.0), (5.187785252292473,0.0), (5.187785252292473,0.5877852522924729), (4.6,0.5877852522924729); (5.199999999999999,0.0), (5.787785252292473,0.0), (5.787785252292473,0.5877852522924731), (5.199999999999999,0.5877852522924731); (5.799999999999999,0.0), (6.387785252292472,0.0), (6.387785252292472,0.5877852522924731), (5.799999999999999,0.5877852522924731); (6.399999999999999,0.0), (6.987785252292472,0.0), (6.987785252292472,0.587785252292473), (6.399999999999999,0.587785252292473); (6.999999999999998,0.0), (7.587785252292472,0.0), (7.587785252292472,0.5877852522924729), (6.999999999999998,0.5877852522924729); (7.599999999999998,0.0), (8.187785252292471,0.0), (8.187785252292471,0.5877852522924731), (7.599999999999998,0.5877852522924731); (8.199999999999998,0.0), (8.78778525229247,0.0), (8.78778525229247,0.5877852522924731), (8.199999999999998,0.5877852522924731); (8.799999999999997,0.0), (9.38778525229247,0.0), (9.38778525229247,0.587785252292473), (8.799999999999997,0.587785252292473); (9.399999999999997,0.0), (9.98778525229247,0.0), (9.98778525229247,0.5877852522924729), (9.399999999999997,0.5877852522924729); (9.999999999999996,0.0), (10.58778525229247,0.0), (10.58778525229247,0.5877852522924731), (9.999999999999996,0.5877852522924731); (10.599999999999996,0.0), (11.18778525229247,0.0), (11.18778525229247,0.5877852522924731), (10.599999999999996,0.5877852522924731); (11.199999999999996,0.0), (11.787785252292469,0.0), (11.787785252292469,0.587785252292473), (11.199999999999996,0.587785252292473); (11.799999999999995,0.0), (12.387785252292469,0.0), (12.387785252292469,0.5877852522924729), (11.799999999999995,0.5877852522924729); (12.399999999999995,0.0), (12.987785252292468,0.0), (12.987785252292468,0.5877852522924731), (12.399999999999995,0.5877852522924731); (12.999999999999995,0.0), (13.587785252292468,0.0), (13.587785252292468,0.5877852522924731), (12.999999999999995,0.5877852522924731); (13.599999999999994,0.0), (14.187785252292468,0.0), (14.187785252292468,0.587785252292473), (13.599999999999994,0.587785252292473); (14.199999999999994,0.0), (14.787785252292467,0.0), (14.787785252292467,0.5877852522924729), (14.199999999999994,0.5877852522924729); (14.799999999999994,0.0), (15.387785252292467,0.0), (15.387785252292467,0.5877852522924731), (14.799999999999994,0.5877852522924731); (15.399999999999993,0.0), (15.69389262614623,0.0), (15.69389262614623,0.29389262614623657), (15.399999999999993,0.29389262614623657); (15.999999999999993,0.0), (16.293892626146228,0.0), (16.293892626146228,0.29389262614623657), (15.999999999999993,0.29389262614623657); (16.599999999999994,0.0), (16.89389262614623,0.0), (16.89389262614623,0.29389262614623657), (16.599999999999994,0.29389262614623657); (17.199999999999996,0.0), (17.49389262614623,0.0), (17.49389262614623,0.29389262614623657), (17.199999999999996,0.29389262614623657); (17.799999999999997,0.0), (18.093892626146232,0.0), (18.093892626146232,0.29389262614623657), (17.799999999999997,0.29389262614623657); (18.4,0.0), (18.693892626146233,0.0), (18.693892626146233,0.29389262614623657), (18.4,0.29389262614623657); (19.0,0.0), (19.293892626146235,0.0), (19.293892626146235,0.29389262614623657), (19.0,0.29389262614623657); (19.6,0.0), (19.893892626146236,0.0), (19.893892626146236,0.29389262614623657), (19.6,0.29389262614623657); (20.200000000000003,0.0), (20.493892626146238,0.0), (20.493892626146238,0.29389262614623657), (20.200000000000003,0.29389262614623657); (20.800000000000004,0.0), (21.09389262614624,0.0), (21.09389262614624,0.29389262614623657), (20.800000000000004,0.29389262614623657); (21.400000000000006,0.0), (21.69389262614624,0.0), (21.69389262614624,0.29389262614623657), (21.400000000000006,0.29389262614623657); (22.000000000000007,0.0), (22.293892626146242,0.0), (22.293892626146242,0.29389262614623657), (22.000000000000007,0.29389262614623657); (22.60000000000001,0.0), (22.893892626146243,0.0), (22.893892626146243,0.29389262614623657), (22.60000000000001,0.29389262614623657); (23.20000000000001,0.0), (23.493892626146245,0.0), (23.493892626146245,0.29389262614623657), (23.20000000000001,0.29389262614623657); (23.80000000000001,0.0), (24.093892626146246,0.0), (24.093892626146246,0.29389262614623657), (23.80000000000001,0.29389262614623657); (24.400000000000013,0.0), (24.693892626146248,0.0), (24.693892626146248,0.29389262614623657), (24.400000000000013,0.29389262614623657); (25.000000000000014,0.0), (25.29389262614625,0.0), (25.29389262614625,0.29389262614623657), (25.000000000000014,0.29389262614623657); (25.600000000000016,0.0), (25.89389262614625,0.0), (25.89389262614625,0.29389262614623657), (25.600000000000016,0.29389262614623657); (26.200000000000017,0.0), (26.493892626146252,0.0), (26.493892626146252,0.29389262614623657), (26.200000000000017,0.29389262614623657); (26.80000000000002,0.0), (27.093892626146253,0.0), (27.093892626146253,0.29389262614623657), (26.80000000000002,0.29389262614623657); (27.40000000000002,0.0), (27.693892626146255,0.0), (27.693892626146255,0.29389262614623657), (27.40000000000002,0.29389262614623657); (28.00000000000002,0.0), (28.293892626146256,0.0), (28.293892626146256,0.29389262614623657), (28.00000000000002,0.29389262614623657); (28.600000000000023,0.0), (28.893892626146258,0.0), (28.893892626146258,0.29389262614623657), (28.600000000000023,0.29389262614623657); (29.200000000000024,0.0), (29.49389262614626,0.0), (29.49389262614626,0.29389262614623657), (29.200000000000024,0.29389262614623657); (29.800000000000026,0.0), (30.09389262614626,0.0), (30.09389262614626,0.29389262614623657), (29.800000000000026,0.29389262614623657); (30.400000000000027,0.0), (30.693892626146262,0.0), (30.693892626146262,0.29389262614623657), (30.400000000000027,0.29389262614623657); (31.00000000000003,0.0), (31.293892626146263,0.0), (31.293892626146263,0.29389262614623657), (31.00000000000003,0.29389262614623657); (31.60000000000003,0.0), (31.893892626146265,0.0), (31.893892626146265,0.29389262614623657), (31.60000000000003,0.29389262614623657); (32.20000000000003,0.0), (32.49389262614627,0.0), (32.49389262614627,0.29389262614623657), (32.20000000000003,0.29389262614623657); (32.80000000000003,0.0), (33.09389262614627,0.0), (33.09389262614627,0.29389262614623657), (32.80000000000003,0.29389262614623657); (33.400000000000034,0.0), (33.69389262614627,0.0), (33.69389262614627,0.29389262614623657), (33.400000000000034,0.29389262614623657); (34.000000000000036,0.0), (34.293892626146274,0.0), (34.293892626146274,0.29389262614623657), (34.000000000000036,0.29389262614623657); (34.60000000000004,0.0), (34.893892626146275,0.0), (34.893892626146275,0.29389262614623657), (34.60000000000004,0.29389262614623657); (35.20000000000004,0.0), (35.49389262614628,0.0), (35.49389262614628,0.29389262614623657), (35.20000000000004,0.29389262614623657); (35.80000000000004,0.0), (36.09389262614628,0.0), (36.09389262614628,0.29389262614623657), (35.80000000000004,0.29389262614623657); (36.40000000000004,0.0), (36.69389262614628,0.0), (36.69389262614628,0.29389262614623657), (36.40000000000004,0.29389262614623657); (37.00000000000004,0.0), (37.29389262614628,0.0), (37.29389262614628,0.29389262614623657), (37.00000000000004,0.29389262614623657); (37.600000000000044,0.0), (37.89389262614628,0.0), (37.89389262614628,0.29389262614623657), (37.600000000000044,0.29389262614623657); (38.200000000000045,0.0), (38.493892626146284,0.0), (38.493892626146284,0.29389262614623657), (38.200000000000045,0.29389262614623657); (38.80000000000005,0.0), (39.093892626146285,0.0), (39.093892626146285,0.29389262614623657), (38.80000000000005,0.29389262614623657); (39.40000000000005,0.0), (39.69389262614629,0.0), (39.69389262614629,0.29389262614623657), (39.40000000000005,0.29389262614623657); (40.00000000000005,0.0), (40.29389262614629,0.0), (40.29389262614629,0.29389262614623657), (40.00000000000005,0.29389262614623657); (40.60000000000005,0.0), (40.89389262614629,0.0), (40.89389262614629,0.29389262614623657), (40.60000000000005,0.29389262614623657); (41.20000000000005,0.0), (41.49389262614629,0.0), (41.49389262614629,0.29389262614623657), (41.20000000000005,0.29389262614623657); (41.800000000000054,0.0), (42.09389262614629,0.0), (42.09389262614629,0.29389262614623657), (41.800000000000054,0.29389262614623657);"
var arrayOfShapesInRoom = [];
splitSolutionRoom(solutionString);

//Strings to handle shapes not in room
var shapesNotInRoom = "1: (0, 0), (-2, 0), (-2, 2), (0, 2);"
var arrayOfShapesNotInRoom = [];
splitSolutionNotInRoom(shapesNotInRoom);

//Room to be drawn - Must be in this format: 1: <coordinates> #;
var roomString = "4: (0, 0), (0.8526494162024667, 0.8092928915415593), (0.34644929796095963, 1.8702959318493564), (-0.8190489964239736, 1.7167389813849911), (-1.0331664379423868, 0.5608325264814319) #"
var roomCoordinates = splitRoom(roomString);


function setup() {
    canvas = createCanvas(canvasLength, canvasLength);
}

function draw() {
//Initialise the sketch
    background(255);

    drawGrid();
    drawPlot();

    //Draws all shapes in room
    stroke(255, 0, 0);
    drawAllShapes(arrayOfShapesInRoom);

    //Draws all shapes not in room
    //stroke(255, 0, 255);
    //drawAllShapes(arrayOfShapesNotInRoom);

    //Draws room
    stroke(0, 0, 255);
    drawShape(roomCoordinates);
    
}

function drawPlot() {
    //Colours plot black
    stroke(0, 0, 0)

    //Intialises the two axis
    line(canvas.width/2, 0, canvas.width/2, canvas.height);
    line(0, canvas.height/2, canvas.width, canvas.height/2);

    //Draw the Y-Scale
    for(var i = 0; i < 25; i ++) {
        if (i != 0) {
            line(canvas.width/2-4, canvas.height/2 + i * scaleY, canvas.width/2+4, canvas.height/2 + i * scaleY);
            line(canvas.width/2-4, canvas.height/2 - i * scaleY, canvas.width/2+4, canvas.height/2 - i * scaleY);
            text(float_fix(i * scaleValueY), canvas.width/2 - 18, canvas.height/2 - i * scaleY + 4);
            text(-float_fix(i * scaleValueY), canvas.width/2 - 21, canvas.height/2 + i * scaleY + 4);
        }
    }

    //Draws the X-Scale
    for(var i = 0; i < 25; i ++) {
        if (i != 0) {
            line(canvas.width/2 + i * scaleX, canvas.height/2 - 4, canvas.width/2 + i * scaleX, canvas.height/2 + 4);
            line(canvas.width/2 - i * scaleX, canvas.height/2 - 4, canvas.width/2 - i * scaleX, canvas.height/2 + 4);
            text(float_fix(i * scaleValueX), canvas.width/2 + i * scaleX - 7, canvas.height/2 + 17);
            text(-float_fix(i * scaleValueX), canvas.width/2 - i * scaleX - 8, canvas.height/2 + 17);
        }
    }

}

function drawGrid() {
    for (var i = 0; i < canvas.width/scaleGridX/2; i++) {
        if (i != 0 && i % scaleGridX !=0) {
            stroke(224);
            line(canvas.width/2 + scaleGridX * i, 0, canvas.width/2 + scaleGridX * i, canvas.height);
            line(canvas.width/2 - scaleGridX * i, 0, canvas.width/2 - scaleGridX * i, canvas.height);
        }
        else if (i != 0 &&i % scaleGridX == 0) {
            stroke(160);
            line(canvas.width/2 + scaleGridX * i, 0, canvas.width/2 + scaleGridX * i, canvas.height);
            line(canvas.width/2 - scaleGridX * i, 0, canvas.width/2 - scaleGridX * i, canvas.height);
        }
    }

    for (var i = 0; i < canvas.height/scaleGridY/2; i++) {
        if (i != 0 && i % scaleGridY !=0) {
            stroke(224);
            line(0, canvas.height/2 + i * scaleGridY, canvas.width, canvas.height/2 + i * scaleGridY);
            line(0, canvas.height/2 - i* scaleGridY, canvas.width, canvas.height/2 - i * scaleGridY);
        }
        else if (i != 0 && i % scaleGridY== 0) {
            stroke(160);
            line(0, canvas.height/2 + i * scaleGridY, canvas.width, canvas.height/2 + i * scaleGridY);
            line(0, canvas.height/2 - i * scaleGridY, canvas.width, canvas.height/2 - i * scaleGridY);
         }
    }

}

function float_fix(num) {
    //Rounds floating points
    return Math.round(num * 10000000) / 10000000;
}

function double_fix_three_dp(num) {
    return Math.round(num * 1000) / 1000;
}

function drawLine(x1, y1, x2, y2) {
    line(originX + scaleGridX * (x1/scaleGridValueX), originY - scaleGridY * (y1/scaleGridValueY), originX  + scaleGridX * (x2/scaleGridValueX), originY - scaleGridY * (y2/scaleGridValueY));
}

function drawShape(coordinatesOfShape) {
    var startX;
    var startY;
    startX = coordinatesOfShape[0];
    startY = coordinatesOfShape[1];
    for(var i = 0; i < (coordinatesOfShape.length); i+=2) {
        if(i == coordinatesOfShape.length - 2) {
            drawLine(coordinatesOfShape[i], coordinatesOfShape[i+1], startX, startY);
        }
        else {
            drawLine(coordinatesOfShape[i], coordinatesOfShape[i+1], coordinatesOfShape[i+2], coordinatesOfShape[i+3]);
        }
    }
}

function splitRoom(roomString) {
    var removeProblemNumber = roomString.split(": ");

    var noHashRoom = removeProblemNumber[1].split(" #");
    
    var tempRoom = noHashRoom[0].replaceAll("(", "");
    tempRoom = tempRoom.replaceAll(" ", "");
    tempRoom = tempRoom.replaceAll(")", "");

    var tempRoomCoordinates = tempRoom.split(",");
    return tempRoomCoordinates;
}

function splitSolutionRoom(solutionString) {
    var removeProblemNumber = solutionString.split(": ")
    removeProblemNumber.shift();
    

    var stringOfShapes = removeProblemNumber[0].split("; ");
    
    for(var i = 0; i < stringOfShapes.length; i++) {
        var tempShape = stringOfShapes[i].replaceAll("(", "");
        tempShape = tempShape.replaceAll(" ", "");
        tempShape = tempShape.replaceAll(")", "");
        tempShape = tempShape.replaceAll(";", "");
        
        var tempCoordinateOfShape = tempShape.split(",");
        arrayOfShapesInRoom[i] = tempCoordinateOfShape;
    }
}

function splitSolutionNotInRoom(solutionString) {
    var removeProblemNumber = solutionString.split(": ")
    removeProblemNumber.shift();
    

    var stringOfShapes = removeProblemNumber[0].split("; ");
    
    for(var i = 0; i < stringOfShapes.length; i++) {
        var tempShape = stringOfShapes[i].replaceAll("(", "");
        tempShape = tempShape.replaceAll(" ", "");
        tempShape = tempShape.replaceAll(")", "");
        tempShape = tempShape.replaceAll(";", "");
        console.log(tempShape);
        var tempCoordinateOfShape = tempShape.split(",");
        arrayOfShapesNotInRoom[i] = tempCoordinateOfShape;
    }
}

function drawAllShapes(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; i++) {
        drawShape(arrayOfObjects[i]);
    };
}

